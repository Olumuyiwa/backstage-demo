name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  # build:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Set Up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20 
      
  #     - name: Install Dependencies
  #       run: yarn install --frozen-lockfile

      # - name: Compile TypeScript
      #   run: yarn tsc

  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure we get all files, including submodules if any.

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: yarn install --frozen-lockfile
      
      # Static Code Analysis: Linting and Formatting
      - name: Run ESLint
        run: yarn eslint --max-warnings=0 . || true

      - name: Run Prettier Check
        run: yarn prettier --check . || true

      # SonarCloud Analysis (Optional - Requires SonarCloud Setup)
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          projectBaseDir: "."
        continue-on-error: true  # Allow pipeline to continue even if Sonar fails

  deploy:
    runs-on: ubuntu-latest
  #  needs: validate  # Ensure 'validate' completes before deployment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure all files are available.

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20 
      
      - name: Install Dependencies
        run: |
          yarn install --frozen-lockfile
          yarn global add @backstage/cli
          ls -l node_modules/.bin/backstage-cli
        
      - name: Debug Workspace (Verify Files)
        run: |
          echo "Listing files in the workspace..."
          ls -l
          echo "Checking backend directory..."
          ls -l packages/backend/
      
      - name: Ensure Config File Exists
        run: |
          if [ ! -f "app-config.production.yaml" ]; then
            echo "app-config.production.yaml is missing! Creating a default one..."
            cat <<EOT >> app-config.production.yaml
            # Add default production config here if needed
            EOT
          else
            echo "app-config.production.yaml found!"
          fi

      - name: Build Backstage App
        run: |
          yarn build:backend --config app-config.production.yaml
          yarn build:all

      # Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set Up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for Google Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Ensure Dockerfile Exists
        run: |
          if [ ! -f "Dockerfile" ]; then
            echo "Dockerfile is missing! Creating a default one..."
            cat <<EOT >> Dockerfile
            FROM node:20
            WORKDIR /app
            COPY . .
            RUN yarn install --frozen-lockfile
            CMD ["yarn", "start"]
            EOT
          else
            echo "Dockerfile found!"
          fi

      # Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          ls -l  # Debugging: List files in the workspace
          pwd
          docker build -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/backstage/backstage-app:latest -f Dockerfile .
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/backstage/backstage-app:latest

      # Deploy to Cloud Run
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy backstage-app \
            --image us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/backstage/backstage-app:latest \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --port=7007

      # Display the Cloud Run Service URL
      - name: Show Cloud Run URL
        run: gcloud run services describe backstage-app --region=us-central1 --format='value(status.url)'
